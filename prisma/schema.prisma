// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env( "DATABASE_URL" )
  shadowDatabaseUrl = env( "HEROKU_POSTGRESQL_CYAN__URL" )
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation( fields: [userId], references: [id], onDelete: Cascade )

  @@unique([ provider, providerAccountId ])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation( fields: [userId], references: [id], onDelete: Cascade )
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  profile        Profile?
  doctorProfile  DoctorProfile?
  appointments   Appointment[]
  permissions    UserPermission[]
  admin          Boolean          @default( false )
  superuser      Boolean          @default( false )
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([ identifier, token ])
}

model Profile {
  id        String    @id
  user      User      @relation( fields: [id], references: [id], onDelete: Cascade )
  secret    String?   @db.Text
  addresses Address[]
  contacts  Contact[]
}

model Contact {
  id     Int     @id @default(autoincrement())
  userId String
  user   Profile @relation( fields: [userId], references: [id], onDelete: Cascade)
  type   String
  data   String
}

model Address {
  id              Int     @id @default(autoincrement())
  userId          String
  user            Profile @relation( fields: [userId], references: [id], onDelete: Cascade)
  primary         Boolean
  houseNameNumber String?
  addressLine1    String
  addressLine2    String?
  city            String
  region          String
  zip             String
  country         String
}

model DoctorProfile {
  id           String        @id
  user         User          @relation( fields: [id], references: [id], onDelete: Cascade )
  title        String
  hours        DoctorHour[]
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?          @db.Text
  users       UserPermission[]
}

model UserPermission {
  userId       String
  user         User       @relation( fields: [userId], references: [id], onDelete: Cascade )
  permissionId Int
  permission   Permission @relation( fields: [permissionId], references: [id], onDelete: Cascade )

  @@unique([ userId, permissionId ])
}

model Hour {
  id       Int          @id @default(autoincrement())
  day      Int
  start    Int
  active   Boolean      @default(true)
  doctors  DoctorHour[]

  @@unique([ day, start ])
}

model DoctorHour {
  id           Int           @id @default(autoincrement())
  active       Boolean       @default(true)
  doctorId     String
  hourId       Int
  doctor       DoctorProfile @relation( fields: [doctorId], references: [id], onDelete: Cascade )
  hour         Hour          @relation( fields: [hourId], references: [id], onDelete: Cascade)
  appointments Appointment[]
  @@unique([ doctorId, hourId ])
}

model Appointment {
  id        Int        @id @default(autoincrement())
  patientId String
  hourId    Int
  date      DateTime
  patient   User       @relation( fields: [patientId], references: [id], onDelete: Cascade )
  hour      DoctorHour @relation( fields: [hourId], references: [id], onDelete: Cascade)
}

model Setting {
  key   String  @id
  type  String  @default( "string" )
  label String
  help  String? @db.Text
  value String  @db.Text
}
