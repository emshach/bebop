// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env( "DATABASE_URL" )
  shadowDatabaseUrl = env( "HEROKU_POSTGRESQL_CYAN__URL" )
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id             String           @id @default(cuid())
  name           String?
  email          String?          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  profile        Profile?
  doctorProfile  DoctorProfile?
  appointments   Appointment[]
  permissions    UserPermission[]
  superuser      Boolean
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Profile {
  id   String @id
  user User   @relation(fields: [id], references: [id], onDelete: Cascade)
}

model DoctorProfile {
  id           String        @id
  user         User          @relation(fields: [id], references: [id], onDelete: Cascade)
  appointments Appointment[]
}

model Appointment {
  id       Int           @id @default(autoincrement())
  userId   String
  doctorId String
  user     User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  doctor   DoctorProfile @relation(fields: [doctorId], references: [id], onDelete: Cascade)
}

model Permission {
  id          Int              @id @default(autoincrement())
  name        String
  description String?          @db.Text
  users       UserPermission[]
}

model UserPermission {
  userId       String
  user         User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id], onDelete: Cascade)

  @@unique([userId, permissionId])
}
